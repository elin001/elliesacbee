
```{r}
library(tidyverse)
library(readxl)
library(tigris)
```
## load the data
outs.xlsx is census data
```{r}
outs <- read_excel("~/Desktop/elliesacbeeR/data/outs.xlsx", sheet=1)

irsouts <- read.csv("~/Desktop/elliesacbeeR/data/countyoutflow2021.csv")

irsins <- read.csv("~/Desktop/elliesacbeeR/data/countyinflow2021.csv")

state2state <- read_excel("~/Desktop/elliesacbeeR/data/2021ca (1).xlsx")

latlongs <- read_csv("https://gist.github.com/russellsamora/12be4f9f574e92413ea3f92ce1bc58e6/raw/3f18230058afd7431a5d394dab7eeb0aafd29d81/us_county_latlng.csv")
```

California state fips code = 06

##filter down
```{r}
nosummaryrows <-irsouts %>% group_by(y2_countyname) %>% filter(y1_statefips == "6" & y2_statefips !=96 & y2_statefips !=97 & y2_statefips !=98)
```

Just four-county area
```{r}
nosummaryrows %>% filter(y1_countyfips == 34 | y1_countyfips == 31 | y1_countyfips == 9 | y1_countyfips == 57)
```
## getting prepped to geocode
using str_pad to make both the county fips code columns and the state fips code columns have leading zeroes so they're like actual fips codes. then, im gonna concatenate the columns. 
```{r}
irsins$y1_countyfips <- str_pad(irsins$y1_countyfips, 3, pad = 0)

irsins$y1_statefips <- str_pad(irsins$y1_statefips, 2, pad = 0)

irsins$y2_countyfips <- str_pad(irsins$y2_countyfips, 3, pad = 0)

irsins$y2_statefips <- str_pad(irsins$y2_statefips, 2, pad = 0)

irsins <- irsins %>% mutate(state1fullfips = str_c(y1_statefips, y1_countyfips))

irsins <- irsins %>% mutate(state2fullfips = str_c(y2_statefips, y2_countyfips))
```

formatting both.
```{r}
irsouts$y1_countyfips <- str_pad(irsouts$y1_countyfips, 3, pad = 0)

irsouts$y1_statefips <- str_pad(irsouts$y1_statefips, 2, pad = 0)

irsouts$y2_countyfips <- str_pad(irsouts$y2_countyfips, 3, pad = 0)

irsouts$y2_statefips <- str_pad(irsouts$y2_statefips, 2, pad = 0)

irsouts <- irsouts %>% mutate(state1fullfips = str_c(y1_statefips, y1_countyfips))

irsouts <- irsouts %>% mutate(state2fullfips = str_c(y2_statefips, y2_countyfips))
```

## making a table for outmigration from just california
```{r}
justca <- irsouts %>% group_by(y2_countyname) %>% filter(y1_statefips == "06")

justca <- justca %>% filter(y2_statefips !=96 & y2_statefips !=97 & y2_statefips !=98)

supersimplified <- justca %>% group_by(y2_countyname, state2fullfips) %>% summarise(sum(n2))
```


## to merge with lat long data
```{r}
justcawithlatlong <- merge(justca, latlongs, by.x = "state2fullfips", by.y = "fips_code")
```

##print
```{r}
write.csv(justcawithlatlong, "californiaoutmigration.csv")

justca <- justca[complete.cases(justca), ]

write.csv(justca, "californiaoutmigrationnolatlong.csv")
```

```{r}
mergeddata <- read_csv("~/Desktop/elliesacbeeR/data/merge__california__georef-uni.csv")
```


```{r}
mergeddata <- mergeddata[complete.cases(mergeddata), ]
```


```{r}
write.csv(supersimplified, "supersimplified.csv")
```

Ellie EOD note 6/30: 

I need to find the totals for each county's migrants from California. Then, I need to somehow merge that data into a JSON format so that mapbox can read it OR I can open it in After Effects. 


## binding data to shp 
```{r}
library(sf)
```

```{r}
us <- st_read("/Users/elin/Downloads/cb_2018_us_county_500k")

us <- us %>% mutate(fullfips = str_c(STATEFP, COUNTYFP))

irsouts <- irsouts %>% group_by(y2_countyname) %>% filter(y1_statefips == "6" & y2_statefips !=96 & y2_statefips !=97 & y2_statefips !=98)

uswithdata <- merge(irsouts, us, by.x = "state2fullfips", by.y = "fullfips")

st_write(uswithdata, "uswithdata.shp")
```
